// Code generated by MockGen. DO NOT EDIT.
// Source: ./member_persistence.go

// Package mock_out is a generated GoMock package.
package mock_out

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/seungyeop-lee/book-rental-shop/backend/backoffice/context/member/domain"
	vo "github.com/seungyeop-lee/book-rental-shop/backend/backoffice/context/member/vo"
)

// MockMemberFinder is a mock of MemberFinder interface.
type MockMemberFinder struct {
	ctrl     *gomock.Controller
	recorder *MockMemberFinderMockRecorder
}

// MockMemberFinderMockRecorder is the mock recorder for MockMemberFinder.
type MockMemberFinderMockRecorder struct {
	mock *MockMemberFinder
}

// NewMockMemberFinder creates a new mock instance.
func NewMockMemberFinder(ctrl *gomock.Controller) *MockMemberFinder {
	mock := &MockMemberFinder{ctrl: ctrl}
	mock.recorder = &MockMemberFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberFinder) EXPECT() *MockMemberFinderMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockMemberFinder) FindByID(id vo.MemberId) (*domain.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*domain.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockMemberFinderMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockMemberFinder)(nil).FindByID), id)
}

// MockMemberSaver is a mock of MemberSaver interface.
type MockMemberSaver struct {
	ctrl     *gomock.Controller
	recorder *MockMemberSaverMockRecorder
}

// MockMemberSaverMockRecorder is the mock recorder for MockMemberSaver.
type MockMemberSaverMockRecorder struct {
	mock *MockMemberSaver
}

// NewMockMemberSaver creates a new mock instance.
func NewMockMemberSaver(ctrl *gomock.Controller) *MockMemberSaver {
	mock := &MockMemberSaver{ctrl: ctrl}
	mock.recorder = &MockMemberSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberSaver) EXPECT() *MockMemberSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockMemberSaver) Save(member *domain.Member) (vo.MemberId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", member)
	ret0, _ := ret[0].(vo.MemberId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockMemberSaverMockRecorder) Save(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMemberSaver)(nil).Save), member)
}

// MockMemberUpdater is a mock of MemberUpdater interface.
type MockMemberUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockMemberUpdaterMockRecorder
}

// MockMemberUpdaterMockRecorder is the mock recorder for MockMemberUpdater.
type MockMemberUpdaterMockRecorder struct {
	mock *MockMemberUpdater
}

// NewMockMemberUpdater creates a new mock instance.
func NewMockMemberUpdater(ctrl *gomock.Controller) *MockMemberUpdater {
	mock := &MockMemberUpdater{ctrl: ctrl}
	mock.recorder = &MockMemberUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberUpdater) EXPECT() *MockMemberUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method.
func (m *MockMemberUpdater) Update(id vo.MemberId, member *domain.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockMemberUpdaterMockRecorder) Update(id, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMemberUpdater)(nil).Update), id, member)
}

// MockMemberDeleter is a mock of MemberDeleter interface.
type MockMemberDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockMemberDeleterMockRecorder
}

// MockMemberDeleterMockRecorder is the mock recorder for MockMemberDeleter.
type MockMemberDeleterMockRecorder struct {
	mock *MockMemberDeleter
}

// NewMockMemberDeleter creates a new mock instance.
func NewMockMemberDeleter(ctrl *gomock.Controller) *MockMemberDeleter {
	mock := &MockMemberDeleter{ctrl: ctrl}
	mock.recorder = &MockMemberDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberDeleter) EXPECT() *MockMemberDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMemberDeleter) Delete(id vo.MemberId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMemberDeleterMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMemberDeleter)(nil).Delete), id)
}
